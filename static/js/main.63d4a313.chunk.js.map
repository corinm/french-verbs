{"version":3,"sources":["components/Menu.tsx","components/Feedback.tsx","components/Stats.tsx","components/VerbLearnedMessage.tsx","components/TestConjugation.tsx","components/NoHistory.tsx","components/AnswerList.tsx","hooks/helpers.ts","utils/index.ts","components/QuestionRankings.tsx","components/History.tsx","components/DisplayVerb.tsx","components/ListVerbs.tsx","hooks/useAnswerHistory.ts","utils/pickQuestion.ts","hooks/useLists.ts","hooks/useGenerateQuestions.ts","hooks/useStats.ts","hooks/useManageGuess.ts","data.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Menu","location","useLocation","pointing","to","Item","name","active","pathname","Feedback","hasSubmittedAnswer","isCorrect","answer","Label","color","Stats","correct","total","Statistic","Value","VerbLearnedMessage","learned","Message","TestConjugation","verbs","selectedVerb","setSelectedVerb","setGuess","onSubmit","question","guess","correctCount","verbOptions","map","verb","infinitive","french","i","key","text","value","Dropdown","placeholder","fluid","selection","options","onChange","_","props","Header","as","Form","Field","inline","Input","event","target","onKeyPress","NoHistory","AnswerList","answerHistory","List","item","Icon","wasCorrect","Content","otherFrenchPronouns","secondPersonSingular","thirdPersonSingular","firstPersonPlural","secondPersonPlural","thirdPersonPlural","englishPronouns","firstPersonSingular","getPronoun","conjugation","language","concatenate","frenchPronounFromConjugation","englishPronounFromConjugation","getVerb","verbIndex","conjugationData","pronoun","byWorstFirst","a","b","score","QuestionRankings","questionRankings","Table","basic","celled","collapsing","Row","HeaderCell","Body","Object","entries","hash","meta","convertRankingsIntoList","sort","label","Cell","History","length","VerbContainer","styled","div","PronounText","span","VerbText","Conjugation","DisplayVerb","Segment","Group","horizontal","ListVerbs","blankMeta","useAnswerHistory","useState","setAnswerHistory","setQuestionRankings","addToRankings","undefined","newScore","recordOutcome","pickQuestion","rng","list","min","max","Math","floor","randomNumber","useLists","toTest","setToTest","incorrect","setIncorrect","doubleCheck","setDoubleCheck","initialise","moveFromTestToIncorrect","itemToMove","slice","moveFromToTestToDoubleCheck","moveFromIncorrectToDoubleCheck","moveFromDoubleCheckToIncorrect","removeFromDoubleCheck","useGenerateQuestion","setQuestion","setAnswer","setMeta","wantNewQuestion","setWantNewQuestion","setLearned","recordOutcomeInHistory","listIndex","setListIndex","storedVerb","setStoredVerb","useEffect","useReinitialiseIfVerbChanges","chosen","index","answerLanguage","newQuestion","useStats","setCorrectCount","wrongCount","setWrongCount","incrementCorrect","incrementWrong","useManageGuess","correctAnswer","onCorrect","onWrong","hasAlreadyGuessed","setHasAlreadyGuessed","setIsCorrect","answerWithoutPlural","replace","toLowerCase","isSame","english","Styling","App","seedrandom","Date","now","toString","statsProps","questionProps","useGenerateQuestions","guessProps","exact","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAmCeA,EA3BQ,WACrB,IAAMC,EAAqBC,cAE3B,OACE,kBAAC,IAAD,CAAcC,UAAQ,GACpB,kBAAC,IAAD,CAAMC,GAAG,kBACP,kBAAC,IAAaC,KAAd,CACEC,KAAK,UACLC,OAA8B,mBAAtBN,EAASO,YAGrB,kBAAC,IAAD,CAAMJ,GAAG,yBACP,kBAAC,IAAaC,KAAd,CACEC,KAAK,iBACLC,OAA8B,0BAAtBN,EAASO,YAGrB,kBAAC,IAAD,CAAMJ,GAAG,sBACP,kBAAC,IAAaC,KAAd,CACEC,KAAK,gBACLC,OAA8B,uBAAtBN,EAASO,c,mCCNZC,EAfV,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,mBAAoBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OACrC,OAAIF,EACEC,EAEA,kBAACE,EAAA,EAAD,CAAOV,SAAS,OAAOW,MAAM,SAC1B,UAIE,kBAACD,EAAA,EAAD,CAAOV,SAAS,OAAOW,MAAM,OAA7B,iBAAyCF,IAG7C,M,SCEMG,EAfV,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACf,OAAc,IAAVA,EACK,KAGL,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAUC,MAAX,KACGH,EADH,MACeC,GAEf,kBAACC,EAAA,EAAUL,MAAX,kB,SCCOO,EAb4C,SAAC,GAC1D,OAD0E,EAAdC,QAGxD,kBAACC,EAAA,EAAD,CAASR,MAAM,SAAf,8EAMK,MCkFIS,EAjEV,SAAC,GAcC,IAbLC,EAaI,EAbJA,MACAC,EAYI,EAZJA,aACAC,EAWI,EAXJA,gBACAC,EAUI,EAVJA,SACAC,EASI,EATJA,SACAC,EAQI,EARJA,SACAjB,EAOI,EAPJA,OACAkB,EAMI,EANJA,MACApB,EAKI,EALJA,mBACAC,EAII,EAJJA,UACAM,EAGI,EAHJA,MACAc,EAEI,EAFJA,aACAV,EACI,EADJA,QAEMW,EAAcR,EACjBS,KAAI,SAACC,GAAD,OAAwBA,EAAKC,WAAWC,UAC5CH,KACC,SAACE,EAAoBE,GAArB,MAAuD,CACrDC,IAAKD,EACLE,KAAMJ,EACNK,MAAOH,MAcb,OACE,6BACE,kBAACI,EAAA,EAAD,CACEC,YAAY,gBACZC,OAAK,EACLC,WAAS,EACTJ,MAAOf,EACPoB,QAASb,EACTc,SAAU,SAACC,EAAGC,GAAJ,OAA6BtB,EAAgBsB,EAAMR,UAE/D,kBAACS,EAAA,EAAD,CAAQC,GAAG,MAAMrB,GACjB,kBAACsB,EAAA,EAAKC,MAAN,CAAYC,QAAM,GAChB,kBAACC,EAAA,EAAD,CACEZ,YAAY,SACZF,MAAOV,EACPgB,SAAUpC,EAjBA,aARI,SAAC6C,GAAD,OACpB5B,EAAS4B,EAAMC,OAAOhB,QAyBhBiB,WAvBW,SAACF,GACA,UAAdA,EAAMjB,KACRV,OAuBE,kBAAC,EAAD,CACElB,mBAAoBA,EACpBC,UAAWA,EACXC,OAAQA,IAEV,kBAAC,EAAD,CAAoBS,QAASA,KAE/B,kBAAC,EAAD,CAAOL,QAASe,EAAcd,MAAOA,MChF5ByC,EANa,kBAC1B,yDAC0B,kBAAC,IAAD,CAAMtD,GAAG,KAAT,+B,SCabuD,EAbsD,SAAC,GAAD,IACnEC,EADmE,EACnEA,cADmE,OAGnE,kBAACC,EAAA,EAAD,KACGD,EAAc3B,KAAI,SAAC6B,EAAMzB,GAAP,OACjB,kBAACwB,EAAA,EAAKxD,KAAN,CAAWiC,IAAKD,GACd,kBAACwB,EAAA,EAAKE,KAAN,CAAWzD,KAAMwD,EAAKE,WAAa,QAAU,UAC7C,kBAACH,EAAA,EAAKI,QAAN,KAAeH,EAAKjC,gB,SC2BtBqC,EAAgC,CACpCC,qBAAsB,MACtBC,oBAAqB,WACrBC,kBAAmB,QACnBC,mBAAoB,QACpBC,kBAAmB,cAcfC,EAA4B,CAChCC,oBAAqB,KACrBN,qBAAsB,OACtBC,oBAAqB,UACrBC,kBAAmB,MACnBC,mBAAoB,WACpBC,kBAAmB,SAMRG,EAAa,SACxBC,EACAC,EACAC,GAEA,MAAiB,WAAbD,EA5BsC,SAC1CD,EACAE,GAEA,MAAoB,wBAAhBF,EACKE,EAAc,KAAO,MAErBX,EAAoBS,GAsBpBG,CAA6BH,EAAaE,IAAgB,GATxB,SAACF,GAAD,OAC3CH,EAAgBG,GAUPI,CAA8BJ,IAAgB,IC3E5CK,EAAU,SACrBxD,EACAyD,EACAN,EACAC,GAEA,IAAMM,EAA+B1D,EAAMyD,GAAWN,GAChDQ,EAAkBT,EACtBC,EACAC,IACEM,EAAgBL,aAEd3C,EAAegD,EAAgBN,GACrC,MAAM,GAAN,OAAUO,GAAV,OAAoBjD,IAYTkD,EAAe,SAACC,EAAgBC,GAC3C,OAAID,EAAEE,MAAQD,EAAEC,MACP,EACEF,EAAEE,MAAQD,EAAEC,OACb,EAED,GCCIC,EA1BV,SAAC,GAAD,IAAGhE,EAAH,EAAGA,MAAOiE,EAAV,EAAUA,iBAAV,OACH,kBAACC,EAAA,EAAD,CAAOC,MAAM,OAAOC,QAAM,EAACC,YAAU,GACnC,kBAACH,EAAA,EAAMzC,OAAP,KACE,kBAACyC,EAAA,EAAMI,IAAP,KACE,kBAACJ,EAAA,EAAMK,WAAP,kCACA,kBAACL,EAAA,EAAMK,WAAP,oCAIJ,kBAACL,EAAA,EAAMM,KAAP,KDCmC,SACrCP,GADqC,OAGrCQ,OAAOC,QAAQT,GAAkBxD,KAAI,mCAAEkE,EAAF,kBAA8B,CACjEA,OACAC,KAFmC,EAAUA,KAG7Cb,MAHmC,EAAgBA,UCHhDc,CAAwBZ,GACtBa,KAAKlB,GACLnD,KAAI,SAAC6B,EAAMzB,GAAO,IAAD,EAC6ByB,EAAKsC,KAA1CnB,EADQ,EACRA,UAAWN,EADH,EACGA,YAAaC,EADhB,EACgBA,SAC1B2B,EAAQvB,EAAQxD,EAAOyD,EAAWN,EAAaC,GACrD,OACE,kBAACc,EAAA,EAAMI,IAAP,CAAWxD,IAAKD,GACd,kBAACqD,EAAA,EAAMc,KAAP,KAAaD,GACb,kBAACb,EAAA,EAAMc,KAAP,KAAa1C,EAAKyB,cCCjBkB,EAbV,SAAC,GAAgD,IAA9C7C,EAA6C,EAA7CA,cAAe6B,EAA8B,EAA9BA,iBAAkBjE,EAAY,EAAZA,MACvC,OAA6B,IAAzBoC,EAAc8C,OACT,kBAAC,EAAD,MAIP,6BACE,kBAAC,EAAD,CAAkBlF,MAAOA,EAAOiE,iBAAkBA,IAClD,kBAAC,EAAD,CAAY7B,cAAeA,M,4QCjBjC,IAAM+C,EAAgBC,IAAOC,IAAV,KAGbC,EAAcF,IAAOG,KAAV,KAGXC,EAAWJ,IAAOG,KAAV,KAIRE,EAA2D,SAAC,GAAD,IAC/D9B,EAD+D,EAC/DA,QACAjD,EAF+D,EAE/DA,KAF+D,OAI/D,6BACE,kBAAC4E,EAAD,KAAc3B,GACd,kBAAC6B,EAAD,KAAW9E,KAqCAgF,EAjCqB,SAAC,GAAD,IAClC/E,EADkC,EAClCA,WACAsC,EAFkC,EAElCA,oBACAN,EAHkC,EAGlCA,qBACAC,EAJkC,EAIlCA,oBACAC,EALkC,EAKlCA,kBACAC,EANkC,EAMlCA,mBACAC,EAPkC,EAOlCA,kBAPkC,OASlC,kBAACoC,EAAD,KACE,kBAACQ,EAAA,EAAQC,MAAT,KACE,kBAACD,EAAA,EAAD,KACE,kBAAClE,EAAA,EAAD,CAAQC,GAAG,MAAMf,EAAWC,SAE9B,kBAAC+E,EAAA,EAAQC,MAAT,CAAeC,YAAU,GACvB,kBAACF,EAAA,EAAD,KACE,kBAAC,EAAD,CACEhC,QAASV,EAAoBI,YAAc,KAAO,MAClD3C,KAAMuC,EAAoBrC,SAE5B,kBAAC,EAAD,CAAa+C,QAAQ,MAAMjD,KAAMiC,EAAqB/B,SACtD,kBAAC,EAAD,CAAa+C,QAAQ,WAAWjD,KAAMkC,EAAoBhC,UAE5D,kBAAC+E,EAAA,EAAD,KACE,kBAAC,EAAD,CAAahC,QAAQ,QAAQjD,KAAMmC,EAAkBjC,SACrD,kBAAC,EAAD,CAAa+C,QAAQ,QAAQjD,KAAMoC,EAAmBlC,SACtD,kBAAC,EAAD,CAAa+C,QAAQ,aAAajD,KAAMqC,EAAkBnC,cCvCrDkF,EARgC,SAAC,GAAD,IAAG9F,EAAH,EAAGA,MAAH,OAC7C,6BACGA,EAAMS,KAAI,SAACC,EAAMG,GAAP,OACT,kBAAC,EAAD,eAAaC,IAAKD,GAAOH,S,wBCJzBqF,EAAY,CAChBtC,UAAW,EACXN,YAAa,GACbC,SAAU,IA8CG4C,EA3CU,WAAmD,IAAlD3F,EAAiD,uDAAtC,GAAIuE,EAAkC,sEAAhBmB,GAAgB,EAC/BE,mBAA8B,IADC,mBAClE7D,EADkE,KACnD8D,EADmD,OAEzBD,mBAC9C,IAHuE,mBAElEhC,EAFkE,KAEhDkC,EAFgD,KAMnEC,EAAgB,SAACxB,EAAYpC,GACjC,IAAM1B,EAAG,UAAM8D,EAAKnB,UAAX,YAAwBmB,EAAKzB,YAA7B,YAA4CyB,EAAKxB,UACpDW,EAAQvB,EAAa,GAAK,EAEhC,QAA8B6D,IAA1BpC,EAAiBnD,GAAoB,CACvC,IAAMwF,EAAWrC,EAAiBnD,GAAKiD,MAAQA,EAC/CoC,EAAoB,2BACflC,GADc,kBAEhBnD,EAAM,CAAE8D,OAAMb,MAAOuC,WAGxBH,EAAoB,2BACflC,GADc,kBAEhBnD,EAAM,CAAE8D,OAAMb,aAKfwC,EAAgB,SAAC/D,GACrB0D,EAAiB,GAAD,mBACX9D,GADW,CAEd,CACE/B,WACAuE,OACApC,iBAGJ4D,EAAcxB,EAAMpC,IAGtB,MAAO,CACLJ,gBACA6B,mBACAsC,kBC7BWC,EAJM,SAACC,EAAeC,GACnC,OAJmB,SAACD,EAAeE,EAAaC,GAA7B,OACnBC,KAAKC,MAAML,KAASG,EAAMD,EAAM,GAAKA,GAG9BI,CAAaN,EAAK,EAAGC,EAAKxB,OAAS,IC4G7B8B,GAzHE,WAAO,IAAD,EACOf,mBAAiB,IADxB,mBACdgB,EADc,KACNC,EADM,OAEajB,mBAAiB,IAF9B,mBAEdkB,EAFc,KAEHC,EAFG,OAGiBnB,mBAAiB,IAHlC,mBAGdoB,EAHc,KAGDC,EAHC,KA4GrB,MAAO,CACLL,SACAE,YACAE,cACAE,WA3GiB,SAACtH,GAClBiH,EAAU,CACR,CACEzD,UAAWxD,EACXkD,YAAa,aACbC,SAAU,UAEZ,CACEK,UAAWxD,EACXkD,YAAa,sBACbC,SAAU,UAEZ,CACEK,UAAWxD,EACXkD,YAAa,uBACbC,SAAU,UAEZ,CACEK,UAAWxD,EACXkD,YAAa,sBACbC,SAAU,UAEZ,CACEK,UAAWxD,EACXkD,YAAa,oBACbC,SAAU,UAEZ,CACEK,UAAWxD,EACXkD,YAAa,qBACbC,SAAU,UAEZ,CACEK,UAAWxD,EACXkD,YAAa,oBACbC,SAAU,UAEZ,CACEK,UAAWxD,EACXkD,YAAa,aACbC,SAAU,WAEZ,CACEK,UAAWxD,EACXkD,YAAa,sBACbC,SAAU,WAEZ,CACEK,UAAWxD,EACXkD,YAAa,uBACbC,SAAU,WAEZ,CACEK,UAAWxD,EACXkD,YAAa,sBACbC,SAAU,WAEZ,CACEK,UAAWxD,EACXkD,YAAa,oBACbC,SAAU,WAEZ,CACEK,UAAWxD,EACXkD,YAAa,qBACbC,SAAU,WAEZ,CACEK,UAAWxD,EACXkD,YAAa,oBACbC,SAAU,aAGdgE,EAAa,IACbE,EAAe,KAkCfE,wBA/B8B,SAAC3G,GAC/B,IAAM4G,EAAaR,EAAOpG,GAC1BqG,EAAU,GAAD,mBAAKD,EAAOS,MAAM,EAAG7G,IAArB,YAA4BoG,EAAOS,MAAM7G,EAAI,MACtDuG,EAAa,GAAD,mBAAKD,GAAL,gBAAqBM,OA6BjCE,4BA3BkC,SAAC9G,GACnC,IAAM4G,EAAaR,EAAOpG,GAC1BqG,EAAU,GAAD,mBAAKD,EAAOS,MAAM,EAAG7G,IAArB,YAA4BoG,EAAOS,MAAM7G,EAAI,MACtDyG,EAAe,GAAD,mBAAKD,GAAL,gBAAuBI,OAyBrCG,+BAtBqC,SAAC/G,GACtC,IAAM4G,EAAaN,EAAUtG,GAC7BuG,EAAa,GAAD,mBAAKD,EAAUO,MAAM,EAAG7G,IAAxB,YAA+BsG,EAAUO,MAAM7G,EAAI,MAC/DyG,EAAe,GAAD,mBAAKD,GAAL,gBAAuBI,OAoBrCI,+BAlBqC,SAAChH,GACtC,IAAM4G,EAAaJ,EAAYxG,GAC/ByG,EAAe,GAAD,mBAAKD,EAAYK,MAAM,EAAG7G,IAA1B,YAAiCwG,EAAYK,MAAM7G,EAAI,MACrEuG,EAAa,GAAD,mBAAKD,GAAL,gBAAqBM,OAgBjCK,sBAb4B,SAACjH,GAC7ByG,EAAe,GAAD,mBAAKD,EAAYK,MAAM,EAAG7G,IAA1B,YAAiCwG,EAAYK,MAAM7G,EAAI,SCoC1DkH,GAzHa,SAC1B/H,EACAC,EACAwG,GACI,IAAD,EAC6BR,qBAD7B,mBACI5F,EADJ,KACc2H,EADd,OAEyB/B,mBAAiB,IAF1C,mBAEI7G,EAFJ,KAEY6I,EAFZ,OAGqBhC,qBAHrB,mBAGIrB,EAHJ,KAGUsD,EAHV,OAI2CjC,oBAAS,GAJpD,mBAIIkC,EAJJ,KAIqBC,EAJrB,OAK2BnC,oBAAS,GALpC,mBAKIpG,EALJ,KAKawI,EALb,OAWCrC,EAAiB3F,EAAUuE,GAH7BxC,EARC,EAQDA,cACA6B,EATC,EASDA,iBACeqE,EAVd,EAUD/B,cAVC,EAuBCS,KATFO,EAdC,EAcDA,WACAN,EAfC,EAeDA,OACAE,EAhBC,EAgBDA,UACAE,EAjBC,EAiBDA,YACAG,EAlBC,EAkBDA,wBACAG,EAnBC,EAmBDA,4BACAC,EApBC,EAoBDA,+BACAC,EArBC,EAqBDA,+BACAC,EAtBC,EAsBDA,sBAtBC,EAwB+B7B,mBAAS,GAxBxC,mBAwBIsC,EAxBJ,KAwBeC,EAxBf,OAyBiCvC,qBAzBjC,mBAyBIwC,EAzBJ,KAyBgBC,EAzBhB,MApBgC,SACnCD,EACAxI,EACAyI,EACAnB,EACAa,GAEAO,qBAAU,WACJF,IAAexI,IACjByI,EAAczI,GACdsH,EAAWtH,GACXmI,GAAmB,MAEpB,CAACnI,EAAcsH,EAAYkB,EAAYC,EAAeN,IAkCzDQ,CACEH,EACAxI,EACAyI,EACAnB,EACAa,GAGFO,qBAAU,YAkCL1B,EAAO/B,OAAS,GAAKiC,EAAUjC,OAAS,GAAKmC,EAAYnC,OAAS,IACnEiD,KAlCkB,WAClB,IAAIU,EAAe,CACjBpF,UAAW,EACXN,YAAa,aACbC,SAAU,UAGZ,GAAI6D,EAAO/B,OAAS,EAAG,CACrB,IAAM4D,EAAQtC,EAAaC,EAAKQ,GAChCuB,EAAaM,GACbD,EAAS5B,EAAO6B,QACX,GAAI3B,EAAUjC,OAAS,EAAG,CAC/B,IAAM4D,EAAQtC,EAAaC,EAAKU,GAChCqB,EAAaM,GACbD,EAAS1B,EAAU2B,QACd,GAAIzB,EAAYnC,OAAS,EAAG,CACjC,IAAM4D,EAAQtC,EAAaC,EAAKY,GAChCmB,EAAaM,GACbD,EAASxB,EAAYyB,GAlBC,MAqBqBD,EAArCpF,EArBgB,EAqBhBA,UAAWN,EArBK,EAqBLA,YAAaC,EArBR,EAqBQA,SAE1B2F,EAA8B,WAAb3F,EAAwB,UAAY,SACrD/C,EAAWmD,EAAQxD,EAAOyD,EAAWN,EAAaC,GAClDhE,EAASoE,EAAQxD,EAAOyD,EAAWN,EAAa4F,GAEtDf,EAAY3H,GACZ4H,EAAU7I,GACV8I,EAAQ,CAAEzE,YAAWN,cAAaC,aAOlC4F,GACAZ,GAAmB,MAEpB,CAACnB,EAAQE,EAAWE,EAAaZ,EAAKzG,EAAOmI,IAgChD,MAAO,CACL9H,WACAjB,SACAmH,cAjCoB,SAAC/D,GACjByE,EAAO/B,OAAS,EACd1C,EACFmF,EAA4BY,GAE5Bf,EAAwBe,GAEjBpB,EAAUjC,OAAS,EACxB1C,GACFoF,EAA+BW,GAK7B/F,GACFsF,EAAsBS,GAClBlB,EAAYnC,OAAS,IAEvBmD,GAAW,GACXd,EAAWtH,KAGb4H,EAA+BU,GAInCD,EAAuB9F,GACvB4F,GAAmB,IAOnBhG,gBACA6B,mBACApE,YC3HWoJ,GAhBE,WAAO,IAAD,EACmBhD,mBAAS,GAD5B,mBACd1F,EADc,KACA2I,EADA,OAEejD,mBAAS,GAFxB,mBAEdkD,EAFc,KAEFC,EAFE,KAOrB,MAAO,CACL7I,eACA8I,iBALuB,kBAAMH,EAAgB3I,EAAe,IAM5D4I,aACAG,eANqB,kBAAMF,EAAcD,EAAa,IAOtD1J,MAAOc,EAAe4I,IC4BXI,GAtCQ,SACrBC,EACAC,EACAC,EACAnD,GACI,IAAD,EACuBN,mBAAS,IADhC,mBACI3F,EADJ,KACWH,EADX,OAE+C8F,oBAAS,GAFxD,mBAEI0D,EAFJ,KAEuBC,EAFvB,OAG+B3D,oBAAS,GAHxC,mBAGI9G,EAHJ,KAGe0K,EAHf,KAwBH,MAAO,CACLvJ,QACAH,WACAjB,mBAAoByK,EACpBxK,YACAiB,SAxBe,WACVuJ,GAYHxJ,EAAS,IACTyJ,GAAqB,GACrBrD,EAAcpH,IAbA,KAAVmB,IACFsJ,GAAqB,IXuEP,SAACtJ,EAAelB,GACpC,IAAM0K,EAAsB1K,EAAO2K,QAAQ,QAAS,KACpD,OAAOzJ,EAAM0J,gBAAkBF,EAAoBE,cWxEzCC,CAAO3J,EAAOkJ,IAIhBK,GAAa,GACbH,MAJAG,GAAa,GACbJ,SCYKzJ,GA9BO,CACpB,CACEW,WAAY,CAAEC,OAAQ,QAASsJ,QAAS,WACxCjH,oBAAqB,CAAErC,OAAQ,OAAQsJ,QAAS,OAAQ7G,aAAa,GACrEV,qBAAsB,CAAE/B,OAAQ,QAASsJ,QAAS,QAClDtH,oBAAqB,CAAEhC,OAAQ,OAAQsJ,QAAS,SAChDrH,kBAAmB,CAAEjC,OAAQ,SAAUsJ,QAAS,QAChDpH,mBAAoB,CAAElC,OAAQ,QAASsJ,QAAS,QAChDnH,kBAAmB,CAAEnC,OAAQ,SAAUsJ,QAAS,SAElD,CACEvJ,WAAY,CAAEC,OAAQ,QAASsJ,QAAS,WACxCjH,oBAAqB,CAAErC,OAAQ,KAAMsJ,QAAS,OAAQ7G,aAAa,GACnEV,qBAAsB,CAAE/B,OAAQ,KAAMsJ,QAAS,QAC/CtH,oBAAqB,CAAEhC,OAAQ,IAAKsJ,QAAS,OAC7CrH,kBAAmB,CAAEjC,OAAQ,QAASsJ,QAAS,QAC/CpH,mBAAoB,CAAElC,OAAQ,OAAQsJ,QAAS,QAC/CnH,kBAAmB,CAAEnC,OAAQ,MAAOsJ,QAAS,SAE/C,CACEvJ,WAAY,CAAEC,OAAQ,QAASsJ,QAAS,SACxCjH,oBAAqB,CAAErC,OAAQ,OAAQsJ,QAAS,MAChDvH,qBAAsB,CAAE/B,OAAQ,MAAOsJ,QAAS,MAChDtH,oBAAqB,CAAEhC,OAAQ,KAAMsJ,QAAS,QAC9CrH,kBAAmB,CAAEjC,OAAQ,SAAUsJ,QAAS,MAChDpH,mBAAoB,CAAElC,OAAQ,QAASsJ,QAAS,MAChDnH,kBAAmB,CAAEnC,OAAQ,OAAQsJ,QAAS,Q,8GCXlD,IAAMC,GAAU/E,IAAOC,IAAV,MAsEE+E,GAhEH,WACV,IAAM3D,EAAM4D,IAAWC,KAAKC,MAAMC,YADlB,EAGwBvE,mBAAiB,GAHzC,mBAGThG,EAHS,KAGKC,EAHL,KAIVuK,EAAaxB,KACbyB,EAAgBC,GAAqB3K,GAAOC,EAAcwG,GAC1DmE,EAAarB,GACjBmB,EAActL,OACdqL,EAAWpB,iBACXoB,EAAWnB,eACXoB,EAAcnE,eAGhB,OACE,kBAAC4D,GAAD,KACE,kBAAC1I,EAAA,EAAD,CAAQC,GAAG,MAAX,gBAEA,kBAAC,IAAD,KACE,kBAAC,EAAD,MAEA,kBAACiE,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEkF,OAAK,EACLC,KAAK,iBACLC,OAAQ,kBACN,kBAAC,EAAD,CACE/K,MAAOA,GACPC,aAAcA,EACdC,gBAAiBA,EACjBK,aAAckK,EAAWlK,aACzBd,MAAOgL,EAAWhL,MAClBY,SAAUqK,EAAcrK,SACxBjB,OAAQsL,EAActL,OACtBS,QAAS6K,EAAc7K,QACvBS,MAAOsK,EAAWtK,MAClBH,SAAUyK,EAAWzK,SACrBC,SAAUwK,EAAWxK,SACrBlB,mBAAoB0L,EAAW1L,mBAC/BC,UAAWyL,EAAWzL,eAI5B,kBAAC,IAAD,CACE2L,KAAK,wBACLC,OAAQ,kBACN,kBAAC,EAAD,CACE3I,cAAesI,EAActI,cAC7B6B,iBAAkByG,EAAczG,iBAChCjE,MAAOA,QAIb,kBAAC,IAAD,CACE8K,KAAK,qBACLC,OAAQ,kBAAM,kBAAC,EAAD,CAAW/K,MAAOA,aClE1BgL,QACW,cAA7BC,OAAOxM,SAASyM,UAEe,UAA7BD,OAAOxM,SAASyM,UAEhBD,OAAOxM,SAASyM,SAASC,MACvB,2DCXNC,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.63d4a313.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { Menu as SemanticMenu } from \"semantic-ui-react\";\n\ninterface Location {\n  pathname: string;\n}\n\nconst Menu: React.FC = () => {\n  const location: Location = useLocation();\n\n  return (\n    <SemanticMenu pointing>\n      <Link to=\"/french-verbs/\">\n        <SemanticMenu.Item\n          name=\"Test me\"\n          active={location.pathname === \"/french-verbs/\"}\n        />\n      </Link>\n      <Link to=\"/french-verbs/history\">\n        <SemanticMenu.Item\n          name=\"Answer history\"\n          active={location.pathname === \"/french-verbs/history\"}\n        />\n      </Link>\n      <Link to=\"/french-verbs/list\">\n        <SemanticMenu.Item\n          name=\"List of verbs\"\n          active={location.pathname === \"/french-verbs/list\"}\n        />\n      </Link>\n    </SemanticMenu>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\nimport { Label } from \"semantic-ui-react\";\n\nconst Feedback: React.FC<{\n  hasSubmittedAnswer: boolean;\n  isCorrect: boolean;\n  answer: string;\n}> = ({ hasSubmittedAnswer, isCorrect, answer }) => {\n  if (hasSubmittedAnswer) {\n    if (isCorrect) {\n      return (\n        <Label pointing=\"left\" color=\"green\">\n          {\"✅\"}\n        </Label>\n      );\n    } else {\n      return <Label pointing=\"left\" color=\"red\">{`╳ ${answer}`}</Label>;\n    }\n  }\n  return null;\n};\n\nexport default Feedback;\n","import React from \"react\";\nimport { Statistic } from \"semantic-ui-react\";\n\nconst Stats: React.FC<{\n  correct: number;\n  total: number;\n}> = ({ correct, total }) => {\n  if (total === 0) {\n    return null;\n  } else {\n    return (\n      <Statistic>\n        <Statistic.Value>\n          {correct} / {total}\n        </Statistic.Value>\n        <Statistic.Label>Correct</Statistic.Label>\n      </Statistic>\n    );\n  }\n};\n\nexport default Stats;\n","import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\n\nconst VerbLearnedMessage: React.FC<{ learned: boolean }> = ({ learned }) => {\n  if (learned) {\n    return (\n      <Message color=\"green\">\n        Great job! You've learned this verb. Carry on with this one or try\n        another\n      </Message>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default VerbLearnedMessage;\n","import React from \"react\";\nimport {\n  Input,\n  Header,\n  Form,\n  Dropdown,\n  DropdownItemProps,\n  DropdownProps,\n} from \"semantic-ui-react\";\n\nimport { Verb } from \"../types\";\nimport Feedback from \"./Feedback\";\nimport Stats from \"./Stats\";\nimport VerbLearnedMessage from \"./VerbLearnedMessage\";\n\nconst TestConjugation: React.FC<{\n  verbs: Verb[];\n  selectedVerb: number;\n  setSelectedVerb: Function;\n  setGuess: Function;\n  onSubmit: Function;\n  question: string | undefined;\n  answer: string;\n  guess: string;\n  hasSubmittedAnswer: boolean;\n  isCorrect: boolean;\n  total: number;\n  correctCount: number;\n  learned: boolean;\n}> = ({\n  verbs,\n  selectedVerb,\n  setSelectedVerb,\n  setGuess,\n  onSubmit,\n  question,\n  answer,\n  guess,\n  hasSubmittedAnswer,\n  isCorrect,\n  total,\n  correctCount,\n  learned,\n}) => {\n  const verbOptions = verbs\n    .map((verb: Verb): string => verb.infinitive.french)\n    .map(\n      (infinitive: string, i: number): DropdownItemProps => ({\n        key: i,\n        text: infinitive,\n        value: i,\n      })\n    );\n\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    setGuess(event.target.value);\n\n  const onKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      onSubmit();\n    }\n  };\n  const doNothing = () => {};\n\n  return (\n    <div>\n      <Dropdown\n        placeholder=\"Select a verb\"\n        fluid\n        selection\n        value={selectedVerb}\n        options={verbOptions}\n        onChange={(_, props: DropdownProps) => setSelectedVerb(props.value)}\n      />\n      <Header as=\"h1\">{question}</Header>\n      <Form.Field inline>\n        <Input\n          placeholder=\"Answer\"\n          value={guess}\n          onChange={hasSubmittedAnswer ? doNothing : onInputChange}\n          onKeyPress={onKeyPress}\n        />\n        <Feedback\n          hasSubmittedAnswer={hasSubmittedAnswer}\n          isCorrect={isCorrect}\n          answer={answer}\n        />\n        <VerbLearnedMessage learned={learned} />\n      </Form.Field>\n      <Stats correct={correctCount} total={total} />\n    </div>\n  );\n};\n\nexport default TestConjugation;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NoHistory: React.FC = () => (\n  <span>\n    Nothing to display, try <Link to=\"/\">answering some questions!</Link>\n  </span>\n);\n\nexport default NoHistory;\n","import React from \"react\";\nimport { List } from \"semantic-ui-react\";\n\nimport { AnswerHistoryItem } from \"../types\";\n\nconst AnswerList: React.FC<{ answerHistory: AnswerHistoryItem[] }> = ({\n  answerHistory,\n}) => (\n  <List>\n    {answerHistory.map((item, i) => (\n      <List.Item key={i}>\n        <List.Icon name={item.wasCorrect ? \"check\" : \"times\"} />\n        <List.Content>{item.question}</List.Content>\n      </List.Item>\n    ))}\n  </List>\n);\n\nexport default AnswerList;\n","import seedrandom from \"seedrandom\";\n\nimport { Verb, QuestionRankings } from \"../types\";\n\nconst randomNumber = (max: number): number => {\n  const min = 0;\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const randomVerb = (verbs: Verb[]): number =>\n  randomNumber(verbs.length - 1);\n\nconst conjugations = [\n  \"infinitive\",\n  \"firstPersonSingular\",\n  \"secondPersonSingular\",\n  \"thirdPersonSingular\",\n  \"firstPersonPlural\",\n  \"secondPersonPlural\",\n  \"thirdPersonPlural\",\n];\n\nexport const randomConjugation = () => {\n  return conjugations[randomNumber(conjugations.length - 1)];\n};\n\nexport const randomLanguage = () => {\n  const rand = randomNumber(1);\n  if (rand === 0) {\n    return [\"french\", \"english\"];\n  } else {\n    return [\"english\", \"french\"];\n  }\n};\n\ninterface Pronouns {\n  [key: string]: string;\n}\n\nconst otherFrenchPronouns: Pronouns = {\n  secondPersonSingular: \"tu \",\n  thirdPersonSingular: \"il/elle \",\n  firstPersonPlural: \"nous \",\n  secondPersonPlural: \"vous \",\n  thirdPersonPlural: \"ils/elles \",\n};\n\nexport const frenchPronounFromConjugation = (\n  conjugation: string,\n  concatenate: boolean\n): string => {\n  if (conjugation === \"firstPersonSingular\") {\n    return concatenate ? \"j'\" : \"je \";\n  } else {\n    return otherFrenchPronouns[conjugation];\n  }\n};\n\nconst englishPronouns: Pronouns = {\n  firstPersonSingular: \"I \",\n  secondPersonSingular: \"you \",\n  thirdPersonSingular: \"he/she \",\n  firstPersonPlural: \"we \",\n  secondPersonPlural: \"you (p) \",\n  thirdPersonPlural: \"they \",\n};\n\nexport const englishPronounFromConjugation = (conjugation: string): string =>\n  englishPronouns[conjugation];\n\nexport const getPronoun = (\n  conjugation: string,\n  language: string,\n  concatenate: boolean\n) => {\n  if (language === \"french\") {\n    return frenchPronounFromConjugation(conjugation, concatenate) || \"\";\n  } else {\n    return englishPronounFromConjugation(conjugation) || \"\";\n  }\n};\n\n/**\n * Compares the user's guess with the desired answer, taking into account\n * plural notation and case\n * @param guess\n * @param answer\n */\nexport const isSame = (guess: string, answer: string): boolean => {\n  const answerWithoutPlural = answer.replace(\" (p) \", \" \");\n  return guess.toLowerCase() === answerWithoutPlural.toLowerCase();\n};\n\n/**\n * Returns the current verb the user is learning\n * @param keysCount\n */\nexport const determineCurrentVerb = (keysCount: number) => {\n  if (keysCount === 0) {\n    return 0;\n  } else {\n    return Math.floor((keysCount - 1) / 7);\n  }\n};\n\n/**\n * Return the current conjugation the user is learning (from 0 to 6)\n * @param keysCount\n */\nexport const determineCurrentConjugation = (keysCount: number) => {\n  return keysCount % 7;\n};\n\n/**\n * Returns true if use has scored 2 or more on every verb-conjugation pair asked so far\n * @param rankings\n */\nexport const allRankingsAboveOne = (rankings: QuestionRankings): boolean => {\n  return Object.values(rankings).filter((item) => item.score < 2).length === 0;\n};\n\n/**\n * Returns a conjugation number from 0 - 6 based on a mixture of chance and\n * which ones have a lower score (i.e. the user is getting them wrong)\n * @param rankings\n */\nexport const chooseConjugationFromRankings = (\n  rankings: QuestionRankings,\n  seed: string\n): number => {\n  const rng = seedrandom(seed); // Need to round this\n  return rng();\n};\n","import { Verb, Conjugation, QuestionRankings, RankingItem } from \"../types\";\nimport { getPronoun } from \"../hooks/helpers\";\n\nexport const getVerb = (\n  verbs: Verb[],\n  verbIndex: number,\n  conjugation: string,\n  language: string\n): string => {\n  const conjugationData: Conjugation = verbs[verbIndex][conjugation];\n  const pronoun: string = getPronoun(\n    conjugation,\n    language,\n    !!conjugationData.concatenate\n  );\n  const verb: string = conjugationData[language];\n  return `${pronoun}${verb}`;\n};\n\nexport const convertRankingsIntoList = (\n  questionRankings: QuestionRankings\n): RankingItem[] =>\n  Object.entries(questionRankings).map(([hash, { meta, score }]) => ({\n    hash,\n    meta,\n    score,\n  }));\n\nexport const byWorstFirst = (a: RankingItem, b: RankingItem): number => {\n  if (a.score > b.score) {\n    return 1;\n  } else if (a.score < b.score) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n","import React from \"react\";\nimport { Table } from \"semantic-ui-react\";\n\nimport { Verb, QuestionRankings as QuestionRankingsType } from \"../types\";\nimport { getVerb, convertRankingsIntoList, byWorstFirst } from \"../utils\";\n\nconst QuestionRankings: React.FC<{\n  verbs: Verb[];\n  questionRankings: QuestionRankingsType;\n}> = ({ verbs, questionRankings }) => (\n  <Table basic=\"very\" celled collapsing>\n    <Table.Header>\n      <Table.Row>\n        <Table.HeaderCell>Verb/Conjugation/Language</Table.HeaderCell>\n        <Table.HeaderCell>Ranking (Higher = better)</Table.HeaderCell>\n      </Table.Row>\n    </Table.Header>\n\n    <Table.Body>\n      {convertRankingsIntoList(questionRankings)\n        .sort(byWorstFirst)\n        .map((item, i) => {\n          const { verbIndex, conjugation, language } = item.meta;\n          const label = getVerb(verbs, verbIndex, conjugation, language);\n          return (\n            <Table.Row key={i}>\n              <Table.Cell>{label}</Table.Cell>\n              <Table.Cell>{item.score}</Table.Cell>\n            </Table.Row>\n          );\n        })}\n    </Table.Body>\n  </Table>\n);\n\nexport default QuestionRankings;\n","import React from \"react\";\n\nimport {\n  Verb,\n  AnswerHistoryItem,\n  QuestionRankings as QuestionRankingsType,\n} from \"../types\";\nimport NoHistory from \"./NoHistory\";\nimport AnswerList from \"./AnswerList\";\nimport QuestionRankings from \"./QuestionRankings\";\n\nconst History: React.FC<{\n  answerHistory: AnswerHistoryItem[];\n  questionRankings: QuestionRankingsType;\n  verbs: Verb[];\n}> = ({ answerHistory, questionRankings, verbs }) => {\n  if (answerHistory.length === 0) {\n    return <NoHistory />;\n  }\n\n  return (\n    <div>\n      <QuestionRankings verbs={verbs} questionRankings={questionRankings} />\n      <AnswerList answerHistory={answerHistory} />\n    </div>\n  );\n};\n\nexport default History;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Header, Segment } from \"semantic-ui-react\";\n\nimport { Verb } from \"../types\";\n\nconst VerbContainer = styled.div`\n  margin-bottom: 10px;\n`;\nconst PronounText = styled.span`\n  color: grey;\n`;\nconst VerbText = styled.span`\n  color: red;\n`;\n\nconst Conjugation: React.FC<{ pronoun: string; verb: string }> = ({\n  pronoun,\n  verb,\n}) => (\n  <div>\n    <PronounText>{pronoun}</PronounText>\n    <VerbText>{verb}</VerbText>\n  </div>\n);\n\nconst DisplayVerb: React.FC<Verb> = ({\n  infinitive,\n  firstPersonSingular,\n  secondPersonSingular,\n  thirdPersonSingular,\n  firstPersonPlural,\n  secondPersonPlural,\n  thirdPersonPlural,\n}) => (\n  <VerbContainer>\n    <Segment.Group>\n      <Segment>\n        <Header as=\"h2\">{infinitive.french}</Header>\n      </Segment>\n      <Segment.Group horizontal>\n        <Segment>\n          <Conjugation\n            pronoun={firstPersonSingular.concatenate ? \"j'\" : \"je \"}\n            verb={firstPersonSingular.french}\n          />\n          <Conjugation pronoun=\"tu \" verb={secondPersonSingular.french} />\n          <Conjugation pronoun=\"il/elle \" verb={thirdPersonSingular.french} />\n        </Segment>\n        <Segment>\n          <Conjugation pronoun=\"nous \" verb={firstPersonPlural.french} />\n          <Conjugation pronoun=\"vous \" verb={secondPersonPlural.french} />\n          <Conjugation pronoun=\"ils/elles \" verb={thirdPersonPlural.french} />\n        </Segment>\n      </Segment.Group>\n    </Segment.Group>\n  </VerbContainer>\n);\n\nexport default DisplayVerb;\n","import React from \"react\";\n\nimport DisplayVerb from \"./DisplayVerb\";\nimport { Verb } from \"../types\";\n\nconst ListVerbs: React.FC<{ verbs: Verb[] }> = ({ verbs }) => (\n  <div>\n    {verbs.map((verb, i) => (\n      <DisplayVerb key={i} {...verb} />\n    ))}\n  </div>\n);\n\nexport default ListVerbs;\n","import { useState } from \"react\";\n\nimport { Meta, AnswerHistoryItem, QuestionRankings } from \"../types\";\n\nconst blankMeta = {\n  verbIndex: 0,\n  conjugation: \"\",\n  language: \"\",\n};\n\nconst useAnswerHistory = (question = \"\", meta: Meta = { ...blankMeta }) => {\n  const [answerHistory, setAnswerHistory] = useState<AnswerHistoryItem[]>([]);\n  const [questionRankings, setQuestionRankings] = useState<QuestionRankings>(\n    {}\n  );\n\n  const addToRankings = (meta: Meta, wasCorrect: boolean) => {\n    const key = `${meta.verbIndex}-${meta.conjugation}-${meta.language}`;\n    const score = wasCorrect ? 1 : -1;\n\n    if (questionRankings[key] !== undefined) {\n      const newScore = questionRankings[key].score + score;\n      setQuestionRankings({\n        ...questionRankings,\n        [key]: { meta, score: newScore },\n      });\n    } else {\n      setQuestionRankings({\n        ...questionRankings,\n        [key]: { meta, score },\n      });\n    }\n  };\n\n  const recordOutcome = (wasCorrect: boolean) => {\n    setAnswerHistory([\n      ...answerHistory,\n      {\n        question,\n        meta,\n        wasCorrect,\n      },\n    ]);\n    addToRankings(meta, wasCorrect);\n  };\n\n  return {\n    answerHistory,\n    questionRankings,\n    recordOutcome,\n  };\n};\n\nexport default useAnswerHistory;\n","// Choose first verb\n// Ask each conjugation once, in each language, at random (14 combinations)\n//   Each incorrect answer gets put to the side\n// Once every conjugation has been asked once, ask the incorrect ones at random\n//   If correct, remove from list\n//   If wrong, keep in list\n// Once list is empty, repeat with another verb\n\n// const currentVerb = 0\n// const mistakes = [{ conjugation: '', language: '' }]\n\nimport { Meta } from \"../types\";\n\nconst randomNumber = (rng: Function, min: number, max: number): number =>\n  Math.floor(rng() * (max - min + 1) + min);\n\nconst pickQuestion = (rng: Function, list: Meta[]): number => {\n  return randomNumber(rng, 0, list.length - 1);\n};\n\nexport default pickQuestion;\n","import { useState } from \"react\";\n\nimport { Meta } from \"../types\";\n\nconst useLists = () => {\n  const [toTest, setToTest] = useState<Meta[]>([]);\n  const [incorrect, setIncorrect] = useState<Meta[]>([]);\n  const [doubleCheck, setDoubleCheck] = useState<Meta[]>([]);\n\n  const initialise = (selectedVerb: number) => {\n    setToTest([\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"infinitive\",\n        language: \"french\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"firstPersonSingular\",\n        language: \"french\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"secondPersonSingular\",\n        language: \"french\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"thirdPersonSingular\",\n        language: \"french\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"firstPersonPlural\",\n        language: \"french\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"secondPersonPlural\",\n        language: \"french\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"thirdPersonPlural\",\n        language: \"french\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"infinitive\",\n        language: \"english\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"firstPersonSingular\",\n        language: \"english\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"secondPersonSingular\",\n        language: \"english\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"thirdPersonSingular\",\n        language: \"english\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"firstPersonPlural\",\n        language: \"english\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"secondPersonPlural\",\n        language: \"english\",\n      },\n      {\n        verbIndex: selectedVerb,\n        conjugation: \"thirdPersonPlural\",\n        language: \"english\",\n      },\n    ]);\n    setIncorrect([]);\n    setDoubleCheck([]);\n  };\n\n  const moveFromTestToIncorrect = (i: number) => {\n    const itemToMove = toTest[i];\n    setToTest([...toTest.slice(0, i), ...toTest.slice(i + 1)]);\n    setIncorrect([...incorrect, { ...itemToMove }]);\n  };\n  const moveFromToTestToDoubleCheck = (i: number) => {\n    const itemToMove = toTest[i];\n    setToTest([...toTest.slice(0, i), ...toTest.slice(i + 1)]);\n    setDoubleCheck([...doubleCheck, { ...itemToMove }]);\n  };\n\n  const moveFromIncorrectToDoubleCheck = (i: number) => {\n    const itemToMove = incorrect[i];\n    setIncorrect([...incorrect.slice(0, i), ...incorrect.slice(i + 1)]);\n    setDoubleCheck([...doubleCheck, { ...itemToMove }]);\n  };\n  const moveFromDoubleCheckToIncorrect = (i: number) => {\n    const itemToMove = doubleCheck[i];\n    setDoubleCheck([...doubleCheck.slice(0, i), ...doubleCheck.slice(i + 1)]);\n    setIncorrect([...incorrect, { ...itemToMove }]);\n  };\n\n  const removeFromDoubleCheck = (i: number) => {\n    setDoubleCheck([...doubleCheck.slice(0, i), ...doubleCheck.slice(i + 1)]);\n  };\n\n  return {\n    toTest,\n    incorrect,\n    doubleCheck,\n    initialise,\n    moveFromTestToIncorrect,\n    moveFromToTestToDoubleCheck,\n    moveFromIncorrectToDoubleCheck,\n    moveFromDoubleCheckToIncorrect,\n    removeFromDoubleCheck,\n  };\n};\n\nexport default useLists;\n","import { useState, useEffect } from \"react\";\n\nimport { Verb, Meta } from \"../types\";\nimport useAnswerHistory from \"./useAnswerHistory\";\nimport { getVerb } from \"../utils\";\nimport pickQuestion from \"../utils/pickQuestion\";\nimport useLists from \"./useLists\";\n\nconst useReinitialiseIfVerbChanges = (\n  storedVerb: number | undefined,\n  selectedVerb: number,\n  setStoredVerb: Function,\n  initialise: Function,\n  setWantNewQuestion: Function\n) => {\n  useEffect(() => {\n    if (storedVerb !== selectedVerb) {\n      setStoredVerb(selectedVerb);\n      initialise(selectedVerb);\n      setWantNewQuestion(true);\n    }\n  }, [selectedVerb, initialise, storedVerb, setStoredVerb, setWantNewQuestion]);\n};\n\nconst useGenerateQuestion = (\n  verbs: Verb[],\n  selectedVerb: number,\n  rng: Function\n) => {\n  const [question, setQuestion] = useState<string>();\n  const [answer, setAnswer] = useState<string>(\"\");\n  const [meta, setMeta] = useState<Meta>();\n  const [wantNewQuestion, setWantNewQuestion] = useState(true);\n  const [learned, setLearned] = useState(false);\n\n  const {\n    answerHistory,\n    questionRankings,\n    recordOutcome: recordOutcomeInHistory,\n  } = useAnswerHistory(question, meta);\n\n  const {\n    initialise,\n    toTest,\n    incorrect,\n    doubleCheck,\n    moveFromTestToIncorrect,\n    moveFromToTestToDoubleCheck,\n    moveFromIncorrectToDoubleCheck,\n    moveFromDoubleCheckToIncorrect,\n    removeFromDoubleCheck,\n  } = useLists();\n  const [listIndex, setListIndex] = useState(0);\n  const [storedVerb, setStoredVerb] = useState<number | undefined>();\n\n  useReinitialiseIfVerbChanges(\n    storedVerb,\n    selectedVerb,\n    setStoredVerb,\n    initialise,\n    setWantNewQuestion\n  );\n\n  useEffect(() => {\n    const newQuestion = () => {\n      let chosen: Meta = {\n        verbIndex: 0,\n        conjugation: \"infinitive\",\n        language: \"french\",\n      };\n\n      if (toTest.length > 0) {\n        const index = pickQuestion(rng, toTest);\n        setListIndex(index);\n        chosen = toTest[index];\n      } else if (incorrect.length > 0) {\n        const index = pickQuestion(rng, incorrect);\n        setListIndex(index);\n        chosen = incorrect[index];\n      } else if (doubleCheck.length > 0) {\n        const index = pickQuestion(rng, doubleCheck);\n        setListIndex(index);\n        chosen = doubleCheck[index];\n      }\n\n      const { verbIndex, conjugation, language } = chosen;\n\n      const answerLanguage = language === \"french\" ? \"english\" : \"french\";\n      const question = getVerb(verbs, verbIndex, conjugation, language);\n      const answer = getVerb(verbs, verbIndex, conjugation, answerLanguage);\n\n      setQuestion(question);\n      setAnswer(answer);\n      setMeta({ verbIndex, conjugation, language });\n    };\n\n    if (\n      (toTest.length > 0 || incorrect.length > 0 || doubleCheck.length > 0) &&\n      wantNewQuestion\n    ) {\n      newQuestion();\n      setWantNewQuestion(false);\n    }\n  }, [toTest, incorrect, doubleCheck, rng, verbs, wantNewQuestion]);\n\n  const recordOutcome = (wasCorrect: boolean) => {\n    if (toTest.length > 0) {\n      if (wasCorrect) {\n        moveFromToTestToDoubleCheck(listIndex);\n      } else {\n        moveFromTestToIncorrect(listIndex);\n      }\n    } else if (incorrect.length > 0) {\n      if (wasCorrect) {\n        moveFromIncorrectToDoubleCheck(listIndex);\n      } else {\n        // Do nothing, it's still wrong\n      }\n    } else {\n      if (wasCorrect) {\n        removeFromDoubleCheck(listIndex);\n        if (doubleCheck.length < 2) {\n          // Use has completed two rounds\n          setLearned(true);\n          initialise(selectedVerb);\n        }\n      } else {\n        moveFromDoubleCheckToIncorrect(listIndex);\n      }\n    }\n\n    recordOutcomeInHistory(wasCorrect);\n    setWantNewQuestion(true);\n  };\n\n  return {\n    question,\n    answer,\n    recordOutcome,\n    answerHistory,\n    questionRankings,\n    learned,\n  };\n};\n\nexport default useGenerateQuestion;\n","import { useState } from \"react\";\n\nconst useStats = () => {\n  const [correctCount, setCorrectCount] = useState(0);\n  const [wrongCount, setWrongCount] = useState(0);\n\n  const incrementCorrect = () => setCorrectCount(correctCount + 1);\n  const incrementWrong = () => setWrongCount(wrongCount + 1);\n\n  return {\n    correctCount,\n    incrementCorrect,\n    wrongCount,\n    incrementWrong,\n    total: correctCount + wrongCount,\n  };\n};\n\nexport default useStats;\n","import { useState } from \"react\";\n\nimport { isSame } from \"./helpers\";\n\nconst useManageGuess = (\n  correctAnswer: string,\n  onCorrect: Function,\n  onWrong: Function,\n  recordOutcome: Function\n) => {\n  const [guess, setGuess] = useState(\"\");\n  const [hasAlreadyGuessed, setHasAlreadyGuessed] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const onSubmit = () => {\n    if (!hasAlreadyGuessed) {\n      if (guess !== \"\") {\n        setHasAlreadyGuessed(true);\n        if (isSame(guess, correctAnswer)) {\n          setIsCorrect(true);\n          onCorrect();\n        } else {\n          setIsCorrect(false);\n          onWrong();\n        }\n      }\n    } else {\n      setGuess(\"\");\n      setHasAlreadyGuessed(false);\n      recordOutcome(isCorrect);\n    }\n  };\n\n  return {\n    guess,\n    setGuess,\n    hasSubmittedAnswer: hasAlreadyGuessed,\n    isCorrect,\n    onSubmit,\n  };\n};\n\nexport default useManageGuess;\n","import { Verb } from \"./types\";\n\nconst verbs: Verb[] = [\n  {\n    infinitive: { french: \"aimer\", english: \"to like\" },\n    firstPersonSingular: { french: \"aime\", english: \"like\", concatenate: true },\n    secondPersonSingular: { french: \"aimes\", english: \"like\" },\n    thirdPersonSingular: { french: \"aime\", english: \"likes\" },\n    firstPersonPlural: { french: \"aimons\", english: \"like\" },\n    secondPersonPlural: { french: \"aimez\", english: \"like\" },\n    thirdPersonPlural: { french: \"aiment\", english: \"like\" },\n  },\n  {\n    infinitive: { french: \"avoir\", english: \"to have\" },\n    firstPersonSingular: { french: \"ai\", english: \"have\", concatenate: true },\n    secondPersonSingular: { french: \"as\", english: \"have\" },\n    thirdPersonSingular: { french: \"a\", english: \"has\" },\n    firstPersonPlural: { french: \"avons\", english: \"have\" },\n    secondPersonPlural: { french: \"avez\", english: \"have\" },\n    thirdPersonPlural: { french: \"ont\", english: \"have\" },\n  },\n  {\n    infinitive: { french: \"aller\", english: \"to go\" },\n    firstPersonSingular: { french: \"vais\", english: \"go\" },\n    secondPersonSingular: { french: \"vas\", english: \"go\" },\n    thirdPersonSingular: { french: \"va\", english: \"goes\" },\n    firstPersonPlural: { french: \"allons\", english: \"go\" },\n    secondPersonPlural: { french: \"allez\", english: \"go\" },\n    thirdPersonPlural: { french: \"vont\", english: \"go\" },\n  },\n];\n\nexport default verbs;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Segment, Header } from \"semantic-ui-react\";\nimport seedrandom from \"seedrandom\";\n\nimport Menu from \"./components/Menu\";\nimport TestConjugation from \"./components/TestConjugation\";\nimport History from \"./components/History\";\nimport ListVerbs from \"./components/ListVerbs\";\n\nimport useGenerateQuestions from \"./hooks/useGenerateQuestions\";\nimport useStats from \"./hooks/useStats\";\nimport useManageGuess from \"./hooks/useManageGuess\";\n\nimport verbs from \"./data\";\n\nconst Styling = styled.div`\n  * {\n    font-family: Arial;\n  }\n`;\n\nconst App = () => {\n  const rng = seedrandom(Date.now().toString());\n\n  const [selectedVerb, setSelectedVerb] = useState<number>(0);\n  const statsProps = useStats();\n  const questionProps = useGenerateQuestions(verbs, selectedVerb, rng);\n  const guessProps = useManageGuess(\n    questionProps.answer,\n    statsProps.incrementCorrect,\n    statsProps.incrementWrong,\n    questionProps.recordOutcome\n  );\n\n  return (\n    <Styling>\n      <Header as=\"h1\">French verbs</Header>\n\n      <Router>\n        <Menu />\n\n        <Segment>\n          <Switch>\n            <Route\n              exact\n              path=\"/french-verbs/\"\n              render={() => (\n                <TestConjugation\n                  verbs={verbs}\n                  selectedVerb={selectedVerb}\n                  setSelectedVerb={setSelectedVerb}\n                  correctCount={statsProps.correctCount}\n                  total={statsProps.total}\n                  question={questionProps.question}\n                  answer={questionProps.answer}\n                  learned={questionProps.learned}\n                  guess={guessProps.guess}\n                  setGuess={guessProps.setGuess}\n                  onSubmit={guessProps.onSubmit}\n                  hasSubmittedAnswer={guessProps.hasSubmittedAnswer}\n                  isCorrect={guessProps.isCorrect}\n                />\n              )}\n            />\n            <Route\n              path=\"/french-verbs/history\"\n              render={() => (\n                <History\n                  answerHistory={questionProps.answerHistory}\n                  questionRankings={questionProps.questionRankings}\n                  verbs={verbs}\n                />\n              )}\n            />\n            <Route\n              path=\"/french-verbs/list\"\n              render={() => <ListVerbs verbs={verbs} />}\n            ></Route>\n          </Switch>\n        </Segment>\n      </Router>\n    </Styling>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}