{"version":3,"sources":["components/Menu.tsx","components/Feedback.tsx","components/Stats.tsx","components/TestConjugation.tsx","components/NoHistory.tsx","components/AnswerList.tsx","hooks/helpers.ts","utils/index.ts","components/QuestionRankings.tsx","components/History.tsx","components/DisplayVerb.tsx","components/ListVerbs.tsx","hooks/useAnswerHistory.ts","hooks/useGenerateQuestions.ts","hooks/useStats.ts","hooks/useManageGuess.ts","data.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Menu","location","useLocation","pointing","to","Item","name","active","pathname","Feedback","hasSubmittedAnswer","isCorrect","answer","Label","color","Stats","correct","total","Statistic","Value","TestConjugation","setGuess","onSubmit","question","guess","correctCount","Header","as","Form","Field","inline","Input","placeholder","value","onChange","event","target","onKeyPress","key","NoHistory","AnswerList","answerHistory","List","map","item","i","Icon","wasCorrect","Content","randomNumber","max","Math","floor","random","conjugations","otherFrenchPronouns","secondPersonSingular","thirdPersonSingular","firstPersonPlural","secondPersonPlural","thirdPersonPlural","englishPronouns","firstPersonSingular","getPronoun","conjugation","language","concatenate","frenchPronounFromConjugation","englishPronounFromConjugation","byWorstFirst","a","b","score","QuestionRankings","verbs","questionRankings","Table","basic","celled","collapsing","Row","HeaderCell","Body","Object","entries","hash","meta","convertRankingsIntoList","sort","Cell","verbIndex","pronoun","questionLanguage","verb","getVerbTextWithPronoun","History","length","VerbContainer","styled","div","PronounText","span","VerbText","Conjugation","DisplayVerb","infinitive","Segment","Group","french","horizontal","ListVerbs","blankMeta","answerLanguage","useAnswerHistory","useState","setAnswerHistory","setQuestionRankings","addToRankings","undefined","newScore","recordOutcome","useQuestion","setQuestion","setAnswer","setMeta","newQuestion","randomVerb","verbByConjugation","questionPronoun","answerPronoun","questionWord","answerWord","useStats","setCorrectCount","wrongCount","setWrongCount","incrementCorrect","incrementWrong","useManageGuess","correctAnswer","onCorrect","onWrong","onSecondSubmit","setHasSubmittedAnswer","setIsCorrect","answerWithoutPlural","replace","toLowerCase","isSame","english","Styling","App","statsProps","questionProps","useGenerateQuestions","guessProps","exact","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10e4912a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { Menu as SemanticMenu } from \"semantic-ui-react\";\n\ninterface Location {\n  pathname: string;\n}\n\nconst Menu: React.FC = () => {\n  const location: Location = useLocation();\n\n  return (\n    <SemanticMenu pointing>\n      <Link to=\"/french-verbs/\">\n        <SemanticMenu.Item\n          name=\"Test me\"\n          active={location.pathname === \"/french-verbs/\"}\n        />\n      </Link>\n      <Link to=\"/french-verbs/history\">\n        <SemanticMenu.Item\n          name=\"Answer history\"\n          active={location.pathname === \"/french-verbs/history\"}\n        />\n      </Link>\n      <Link to=\"/french-verbs/list\">\n        <SemanticMenu.Item\n          name=\"List of verbs\"\n          active={location.pathname === \"/french-verbs/list\"}\n        />\n      </Link>\n    </SemanticMenu>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\nimport { Label } from \"semantic-ui-react\";\n\nconst Feedback: React.FC<{\n  hasSubmittedAnswer: Boolean;\n  isCorrect: Boolean;\n  answer: string;\n}> = ({ hasSubmittedAnswer, isCorrect, answer }) => {\n  if (hasSubmittedAnswer) {\n    if (isCorrect) {\n      return (\n        <Label pointing=\"left\" color=\"green\">\n          {\"✅\"}\n        </Label>\n      );\n    } else {\n      return <Label pointing=\"left\" color=\"red\">{`╳ ${answer}`}</Label>;\n    }\n  }\n  return null;\n};\n\nexport default Feedback;\n","import React from \"react\";\nimport { Statistic } from \"semantic-ui-react\";\n\nconst Stats: React.FC<{\n  correct: number;\n  total: number;\n}> = ({ correct, total }) => {\n  if (total === 0) {\n    return null;\n  } else {\n    return (\n      <Statistic>\n        <Statistic.Value>\n          {correct} / {total}\n        </Statistic.Value>\n        <Statistic.Label>Correct</Statistic.Label>\n      </Statistic>\n    );\n  }\n};\n\nexport default Stats;\n","import React from \"react\";\nimport { Input, Header, Form } from \"semantic-ui-react\";\n\nimport Feedback from \"./Feedback\";\nimport Stats from \"./Stats\";\n\nconst TestConjugation: React.FC<{\n  setGuess: Function;\n  onSubmit: Function;\n  question: string | undefined;\n  answer: string;\n  guess: string;\n  hasSubmittedAnswer: boolean;\n  isCorrect: boolean;\n  total: number;\n  correctCount: number;\n}> = ({\n  setGuess,\n  onSubmit,\n  question,\n  answer,\n  guess,\n  hasSubmittedAnswer,\n  isCorrect,\n  total,\n  correctCount,\n}) => {\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    setGuess(event.target.value);\n\n  const onKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      onSubmit();\n    }\n  };\n  const doNothing = () => {};\n\n  return (\n    <div>\n      <Header as=\"h1\">{question}</Header>\n      <Form.Field inline>\n        <Input\n          placeholder=\"Answer\"\n          value={guess}\n          onChange={hasSubmittedAnswer ? doNothing : onInputChange}\n          onKeyPress={onKeyPress}\n        />\n        <Feedback\n          hasSubmittedAnswer={hasSubmittedAnswer}\n          isCorrect={isCorrect}\n          answer={answer}\n        />\n      </Form.Field>\n      <Stats correct={correctCount} total={total} />\n    </div>\n  );\n};\n\nexport default TestConjugation;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NoHistory: React.FC = () => (\n  <span>\n    Nothing to display, try <Link to=\"/\">answering some questions!</Link>\n  </span>\n);\n\nexport default NoHistory;\n","import React from \"react\";\nimport { List } from \"semantic-ui-react\";\n\nimport { AnswerHistoryItem } from \"../types\";\n\nconst AnswerList: React.FC<{ answerHistory: AnswerHistoryItem[] }> = ({\n  answerHistory,\n}) => (\n  <List>\n    {answerHistory.map((item, i) => (\n      <List.Item key={i}>\n        <List.Icon name={item.wasCorrect ? \"check\" : \"times\"} />\n        <List.Content>{item.question}</List.Content>\n      </List.Item>\n    ))}\n  </List>\n);\n\nexport default AnswerList;\n","import { Verb } from \"../types\";\n\nconst randomNumber = (max: number): number => {\n  const min = 0;\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const randomVerb = (verbs: Verb[]): number =>\n  randomNumber(verbs.length - 1);\n\nconst conjugations = [\n  \"infinitive\",\n  \"firstPersonSingular\",\n  \"secondPersonSingular\",\n  \"thirdPersonSingular\",\n  \"firstPersonPlural\",\n  \"secondPersonPlural\",\n  \"thirdPersonPlural\",\n];\n\nexport const randomConjugation = () => {\n  return conjugations[randomNumber(conjugations.length - 1)];\n};\n\nexport const randomLanguage = () => {\n  const rand = randomNumber(1);\n  if (rand === 0) {\n    return [\"french\", \"english\"];\n  } else {\n    return [\"english\", \"french\"];\n  }\n};\n\ninterface Pronouns {\n  [key: string]: string;\n}\n\nconst otherFrenchPronouns: Pronouns = {\n  secondPersonSingular: \"tu \",\n  thirdPersonSingular: \"il/elle \",\n  firstPersonPlural: \"nous \",\n  secondPersonPlural: \"vous \",\n  thirdPersonPlural: \"ils/elles \",\n};\n\nexport const frenchPronounFromConjugation = (\n  conjugation: string,\n  concatenate: Boolean\n): string => {\n  if (conjugation === \"firstPersonSingular\") {\n    return concatenate ? \"j'\" : \"je \";\n  } else {\n    return otherFrenchPronouns[conjugation];\n  }\n};\n\nconst englishPronouns: Pronouns = {\n  firstPersonSingular: \"I \",\n  secondPersonSingular: \"you \",\n  thirdPersonSingular: \"he/she \",\n  firstPersonPlural: \"we \",\n  secondPersonPlural: \"you (p) \",\n  thirdPersonPlural: \"they \",\n};\n\nexport const englishPronounFromConjugation = (conjugation: string): string =>\n  englishPronouns[conjugation];\n\nexport const getPronoun = (\n  conjugation: string,\n  language: string,\n  concatenate: Boolean\n) => {\n  if (language === \"french\") {\n    return frenchPronounFromConjugation(conjugation, concatenate) || \"\";\n  } else {\n    return englishPronounFromConjugation(conjugation) || \"\";\n  }\n};\n\nexport const isSame = (guess: string, answer: string): boolean => {\n  const answerWithoutPlural = answer.replace(\" (p) \", \" \");\n  return guess.toLowerCase() === answerWithoutPlural.toLowerCase();\n};\n","import {\n  Verb,\n  Meta,\n  Conjugation,\n  QuestionRankings,\n  RankingItem,\n} from \"../types\";\nimport { getPronoun } from \"../hooks/helpers\";\n\nexport const getVerbTextWithPronoun = (verbs: Verb[], meta: Meta): string => {\n  const conjugation: Conjugation = verbs[meta.verbIndex][meta.conjugation];\n  const pronoun: string = getPronoun(\n    meta.conjugation,\n    meta.questionLanguage,\n    !!conjugation.concatenate\n  );\n  const verb: string = conjugation[meta.questionLanguage];\n  return `${pronoun}${verb}`;\n};\n\nexport const convertRankingsIntoList = (\n  questionRankings: QuestionRankings\n): RankingItem[] =>\n  Object.entries(questionRankings).map(([hash, { meta, score }]) => ({\n    hash,\n    meta,\n    score,\n  }));\n\nexport const byWorstFirst = (a: RankingItem, b: RankingItem): number => {\n  if (a.score > b.score) {\n    return 1;\n  } else if (a.score < b.score) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n","import React from \"react\";\nimport { Table } from \"semantic-ui-react\";\n\nimport { Verb, QuestionRankings as QuestionRankingsType } from \"../types\";\nimport {\n  getVerbTextWithPronoun,\n  convertRankingsIntoList,\n  byWorstFirst,\n} from \"../utils\";\n\nconst QuestionRankings: React.FC<{\n  verbs: Verb[];\n  questionRankings: QuestionRankingsType;\n}> = ({ verbs, questionRankings }) => (\n  <Table basic=\"very\" celled collapsing>\n    <Table.Header>\n      <Table.Row>\n        <Table.HeaderCell>Verb/Conjugation/Language</Table.HeaderCell>\n        <Table.HeaderCell>Ranking (Higher = better)</Table.HeaderCell>\n      </Table.Row>\n    </Table.Header>\n\n    <Table.Body>\n      {convertRankingsIntoList(questionRankings)\n        .sort(byWorstFirst)\n        .map((item, i) => (\n          <Table.Row key={i}>\n            <Table.Cell>{getVerbTextWithPronoun(verbs, item.meta)}</Table.Cell>\n            <Table.Cell>{item.score}</Table.Cell>\n          </Table.Row>\n        ))}\n    </Table.Body>\n  </Table>\n);\n\nexport default QuestionRankings;\n","import React from \"react\";\n\nimport {\n  Verb,\n  AnswerHistoryItem,\n  QuestionRankings as QuestionRankingsType,\n} from \"../types\";\nimport NoHistory from \"./NoHistory\";\nimport AnswerList from \"./AnswerList\";\nimport QuestionRankings from \"./QuestionRankings\";\n\nconst History: React.FC<{\n  answerHistory: AnswerHistoryItem[];\n  questionRankings: QuestionRankingsType;\n  verbs: Verb[];\n}> = ({ answerHistory, questionRankings, verbs }) => {\n  if (answerHistory.length === 0) {\n    return <NoHistory />;\n  }\n\n  return (\n    <div>\n      <QuestionRankings verbs={verbs} questionRankings={questionRankings} />\n      <AnswerList answerHistory={answerHistory} />\n    </div>\n  );\n};\n\nexport default History;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Header, Segment } from \"semantic-ui-react\";\n\nimport { Verb } from \"../types\";\n\nconst VerbContainer = styled.div`\n  margin-bottom: 10px;\n`;\nconst PronounText = styled.span`\n  color: grey;\n`;\nconst VerbText = styled.span`\n  color: red;\n`;\n\nconst Conjugation: React.FC<{ pronoun: String; verb: String }> = ({\n  pronoun,\n  verb,\n}) => (\n  <div>\n    <PronounText>{pronoun}</PronounText>\n    <VerbText>{verb}</VerbText>\n  </div>\n);\n\nconst DisplayVerb: React.FC<Verb> = ({\n  infinitive,\n  firstPersonSingular,\n  secondPersonSingular,\n  thirdPersonSingular,\n  firstPersonPlural,\n  secondPersonPlural,\n  thirdPersonPlural,\n}) => (\n  <VerbContainer>\n    <Segment.Group>\n      <Segment>\n        <Header as=\"h2\">{infinitive.french}</Header>\n      </Segment>\n      <Segment.Group horizontal>\n        <Segment>\n          <Conjugation\n            pronoun={firstPersonSingular.concatenate ? \"j'\" : \"je \"}\n            verb={firstPersonSingular.french}\n          />\n          <Conjugation pronoun=\"tu \" verb={secondPersonSingular.french} />\n          <Conjugation pronoun=\"il/elle \" verb={thirdPersonSingular.french} />\n        </Segment>\n        <Segment>\n          <Conjugation pronoun=\"nous \" verb={firstPersonPlural.french} />\n          <Conjugation pronoun=\"vous \" verb={secondPersonPlural.french} />\n          <Conjugation pronoun=\"ils/elles \" verb={thirdPersonPlural.french} />\n        </Segment>\n      </Segment.Group>\n    </Segment.Group>\n  </VerbContainer>\n);\n\nexport default DisplayVerb;\n","import React from \"react\";\n\nimport DisplayVerb from \"./DisplayVerb\";\nimport { Verb } from \"../types\";\n\nconst ListVerbs: React.FC<{ verbs: Verb[] }> = ({ verbs }) => (\n  <div>\n    {verbs.map((verb, i) => (\n      <DisplayVerb key={i} {...verb} />\n    ))}\n  </div>\n);\n\nexport default ListVerbs;\n","import { useState } from \"react\";\n\nimport { Meta, AnswerHistoryItem, QuestionRankings } from \"../types\";\n\nconst blankMeta = {\n  verbIndex: 0,\n  conjugation: \"\",\n  questionLanguage: \"\",\n  answerLanguage: \"\",\n};\n\nconst useAnswerHistory = (question = \"\", meta: Meta = { ...blankMeta }) => {\n  const [answerHistory, setAnswerHistory] = useState<AnswerHistoryItem[]>([]);\n  const [questionRankings, setQuestionRankings] = useState<QuestionRankings>(\n    {}\n  );\n\n  const addToRankings = (meta: Meta, wasCorrect: boolean) => {\n    const key = `${meta.questionLanguage}-${meta.verbIndex}-${meta.conjugation}`;\n    const score = wasCorrect ? 1 : -1;\n\n    if (questionRankings[key] !== undefined) {\n      const newScore = questionRankings[key].score + score;\n      setQuestionRankings({\n        ...questionRankings,\n        [key]: { meta, score: newScore },\n      });\n    } else {\n      setQuestionRankings({\n        ...questionRankings,\n        [key]: { meta, score },\n      });\n    }\n  };\n\n  const recordOutcome = (wasCorrect: boolean) => {\n    setAnswerHistory([\n      ...answerHistory,\n      {\n        question,\n        meta,\n        wasCorrect,\n      },\n    ]);\n    addToRankings(meta, wasCorrect);\n  };\n\n  return {\n    answerHistory,\n    questionRankings,\n    recordOutcome,\n  };\n};\n\nexport default useAnswerHistory;\n","import { useState } from \"react\";\n\nimport { Verb, Meta } from \"../types\";\nimport {\n  randomVerb,\n  randomConjugation,\n  randomLanguage,\n  getPronoun,\n} from \"./helpers\";\nimport useAnswerHistory from \"./useAnswerHistory\";\n\nconst useQuestion = (verbs: Verb[]) => {\n  const [question, setQuestion] = useState<string>();\n  const [answer, setAnswer] = useState<string>(\"\");\n  const [meta, setMeta] = useState<Meta>();\n\n  const { answerHistory, questionRankings, recordOutcome } = useAnswerHistory(\n    question,\n    meta\n  );\n\n  const newQuestion = () => {\n    const verbIndex = randomVerb(verbs);\n    const verb = verbs[verbIndex];\n    const conjugation = randomConjugation();\n    const verbByConjugation = verb[conjugation];\n    const [questionLanguage, answerLanguage] = randomLanguage();\n\n    const questionPronoun = getPronoun(\n      conjugation,\n      questionLanguage,\n      verbByConjugation.concatenate\n    );\n    const answerPronoun = getPronoun(\n      conjugation,\n      answerLanguage,\n      verbByConjugation.concatenate\n    );\n\n    const questionWord = verbs[verbIndex][conjugation][questionLanguage];\n    const answerWord = verbs[verbIndex][conjugation][answerLanguage];\n    const question = `${questionPronoun}${questionWord}`;\n    const answer = `${answerPronoun}${answerWord}`;\n    setQuestion(question);\n    setAnswer(answer);\n    setMeta({ verbIndex, conjugation, questionLanguage, answerLanguage });\n  };\n\n  if (!question) {\n    newQuestion();\n  }\n\n  return {\n    question,\n    answer,\n    newQuestion,\n    recordOutcome,\n    answerHistory,\n    questionRankings,\n  };\n};\n\nexport default useQuestion;\n","import { useState } from \"react\";\n\nconst useStats = () => {\n  const [correctCount, setCorrectCount] = useState(0);\n  const [wrongCount, setWrongCount] = useState(0);\n\n  const incrementCorrect = () => setCorrectCount(correctCount + 1);\n  const incrementWrong = () => setWrongCount(wrongCount + 1);\n\n  return {\n    correctCount,\n    incrementCorrect,\n    wrongCount,\n    incrementWrong,\n    total: correctCount + wrongCount,\n  };\n};\n\nexport default useStats;\n","import { useState } from \"react\";\n\nimport { isSame } from \"./helpers\";\n\nconst useManageGuess = (\n  correctAnswer: string,\n  onCorrect: Function,\n  onWrong: Function,\n  onSecondSubmit: Function,\n  recordOutcome: Function\n) => {\n  const [guess, setGuess] = useState(\"\");\n  const [hasSubmittedAnswer, setHasSubmittedAnswer] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const onSubmit = () => {\n    if (hasSubmittedAnswer) {\n      setGuess(\"\");\n      setHasSubmittedAnswer(false);\n      onSecondSubmit();\n    } else {\n      if (guess !== \"\") {\n        setHasSubmittedAnswer(true);\n        if (isSame(guess, correctAnswer)) {\n          setIsCorrect(true);\n          recordOutcome(true);\n          onCorrect();\n        } else {\n          setIsCorrect(false);\n          recordOutcome(false);\n          onWrong();\n        }\n      }\n    }\n  };\n\n  return { guess, setGuess, hasSubmittedAnswer, isCorrect, onSubmit };\n};\n\nexport default useManageGuess;\n","import { Verb } from \"./types\";\n\nconst verbs: Verb[] = [\n  {\n    infinitive: { french: \"aimer\", english: \"to like\" },\n    firstPersonSingular: { french: \"aime\", english: \"like\", concatenate: true },\n    secondPersonSingular: { french: \"aimes\", english: \"like\" },\n    thirdPersonSingular: { french: \"aime\", english: \"likes\" },\n    firstPersonPlural: { french: \"aimons\", english: \"like\" },\n    secondPersonPlural: { french: \"aimez\", english: \"like\" },\n    thirdPersonPlural: { french: \"aiment\", english: \"like\" },\n  },\n  {\n    infinitive: { french: \"avoir\", english: \"to have\" },\n    firstPersonSingular: { french: \"ai\", english: \"have\", concatenate: true },\n    secondPersonSingular: { french: \"as\", english: \"have\" },\n    thirdPersonSingular: { french: \"a\", english: \"has\" },\n    firstPersonPlural: { french: \"avons\", english: \"have\" },\n    secondPersonPlural: { french: \"avez\", english: \"have\" },\n    thirdPersonPlural: { french: \"ont\", english: \"have\" },\n  },\n  {\n    infinitive: { french: \"aller\", english: \"to go\" },\n    firstPersonSingular: { french: \"vais\", english: \"go\" },\n    secondPersonSingular: { french: \"vas\", english: \"go\" },\n    thirdPersonSingular: { french: \"va\", english: \"goes\" },\n    firstPersonPlural: { french: \"allons\", english: \"go\" },\n    secondPersonPlural: { french: \"allez\", english: \"go\" },\n    thirdPersonPlural: { french: \"vont\", english: \"go\" },\n  },\n];\n\nexport default verbs;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Segment, Header } from \"semantic-ui-react\";\n\nimport Menu from \"./components/Menu\";\nimport TestConjugation from \"./components/TestConjugation\";\nimport History from \"./components/History\";\nimport ListVerbs from \"./components/ListVerbs\";\n\nimport useGenerateQuestions from \"./hooks/useGenerateQuestions\";\nimport useStats from \"./hooks/useStats\";\nimport useManageGuess from \"./hooks/useManageGuess\";\n\nimport verbs from \"./data\";\n\nconst Styling = styled.div`\n  * {\n    font-family: Arial;\n  }\n`;\n\nconst App = () => {\n  const statsProps = useStats();\n  const questionProps = useGenerateQuestions(verbs);\n  const guessProps = useManageGuess(\n    questionProps.answer,\n    statsProps.incrementCorrect,\n    statsProps.incrementWrong,\n    questionProps.newQuestion,\n    questionProps.recordOutcome\n  );\n\n  return (\n    <Styling>\n      <Header as=\"h1\">French verbs</Header>\n\n      <Router>\n        <Menu />\n\n        <Segment>\n          <Switch>\n            <Route\n              exact\n              path=\"/french-verbs/\"\n              render={() => (\n                <TestConjugation\n                  correctCount={statsProps.correctCount}\n                  total={statsProps.total}\n                  question={questionProps.question}\n                  answer={questionProps.answer}\n                  guess={guessProps.guess}\n                  setGuess={guessProps.setGuess}\n                  onSubmit={guessProps.onSubmit}\n                  hasSubmittedAnswer={guessProps.hasSubmittedAnswer}\n                  isCorrect={guessProps.isCorrect}\n                />\n              )}\n            />\n            <Route\n              path=\"/french-verbs/history\"\n              render={() => (\n                <History\n                  answerHistory={questionProps.answerHistory}\n                  questionRankings={questionProps.questionRankings}\n                  verbs={verbs}\n                />\n              )}\n            />\n            <Route\n              path=\"/french-verbs/list\"\n              render={() => <ListVerbs verbs={verbs} />}\n            ></Route>\n          </Switch>\n        </Segment>\n      </Router>\n    </Styling>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}